/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type Direction = "Unknown" | "Horizontal" | "Vertical" | "DownLeft" | "DownRight" | "UpLeft" | "UpRight" | "Empty";

export type Crossword = number;

export interface PlacedCell {_direction: Direction; _position: GridPosition}

export interface GridPosition {_col: number; _row: number}

export interface TrainTracks {_gridSize: GridSize; _fixedCells: PlacedCell[]; _colCounts: number[]; _rowCounts: number[]}

export interface GridSize {_rows: number; _cols: number}

export type PostpuzzlesTrainTracksProps = Omit<MutateProps<TrainTracks, void, void, TrainTracks>, "path" | "verb">;


export const PostpuzzlesTrainTracks = (props: PostpuzzlesTrainTracksProps) => (
  <Mutate<TrainTracks, void, void, TrainTracks>
    verb="POST"
    path={`/puzzles/train-tracks`}
    {...props}
  />
);

export type UsePostpuzzlesTrainTracksProps = Omit<UseMutateProps<TrainTracks, void, TrainTracks>, "path" | "verb">;


export const usePostpuzzlesTrainTracks = (props: UsePostpuzzlesTrainTracksProps) => useMutate<TrainTracks, void, void, TrainTracks>("POST", `/puzzles/train-tracks`, props);


export interface GetpuzzlesTrainTracksResponse {[key: string]: TrainTracks}

export type GetpuzzlesTrainTracksProps = Omit<GetProps<GetpuzzlesTrainTracksResponse, unknown, void>, "path">;


export const GetpuzzlesTrainTracks = (props: GetpuzzlesTrainTracksProps) => (
  <Get<GetpuzzlesTrainTracksResponse, unknown, void>
    path={`/puzzles/train-tracks`}
    {...props}
  />
);

export type UseGetpuzzlesTrainTracksProps = Omit<UseGetProps<GetpuzzlesTrainTracksResponse, void>, "path">;


export const useGetpuzzlesTrainTracks = (props: UseGetpuzzlesTrainTracksProps) => useGet<GetpuzzlesTrainTracksResponse, unknown, void>(`/puzzles/train-tracks`, props);


export type PostpuzzlesCrosswordsProps = Omit<MutateProps<Crossword, void, void, Crossword>, "path" | "verb">;


export const PostpuzzlesCrosswords = (props: PostpuzzlesCrosswordsProps) => (
  <Mutate<Crossword, void, void, Crossword>
    verb="POST"
    path={`/puzzles/crosswords`}
    {...props}
  />
);

export type UsePostpuzzlesCrosswordsProps = Omit<UseMutateProps<Crossword, void, Crossword>, "path" | "verb">;


export const usePostpuzzlesCrosswords = (props: UsePostpuzzlesCrosswordsProps) => useMutate<Crossword, void, void, Crossword>("POST", `/puzzles/crosswords`, props);


export interface GetpuzzlesCrosswordsResponse {[key: string]: Crossword}

export type GetpuzzlesCrosswordsProps = Omit<GetProps<GetpuzzlesCrosswordsResponse, unknown, void>, "path">;


export const GetpuzzlesCrosswords = (props: GetpuzzlesCrosswordsProps) => (
  <Get<GetpuzzlesCrosswordsResponse, unknown, void>
    path={`/puzzles/crosswords`}
    {...props}
  />
);

export type UseGetpuzzlesCrosswordsProps = Omit<UseGetProps<GetpuzzlesCrosswordsResponse, void>, "path">;


export const useGetpuzzlesCrosswords = (props: UseGetpuzzlesCrosswordsProps) => useGet<GetpuzzlesCrosswordsResponse, unknown, void>(`/puzzles/crosswords`, props);


export type GetpuzzlesTrainTracksIdProps = Omit<GetProps<TrainTracks, void, void>, "path"> & {id: number};


export const GetpuzzlesTrainTracksId = ({id, ...props}: GetpuzzlesTrainTracksIdProps) => (
  <Get<TrainTracks, void, void>
    path={`/puzzles/train-tracks/${id}`}
    {...props}
  />
);

export type UseGetpuzzlesTrainTracksIdProps = Omit<UseGetProps<TrainTracks, void>, "path"> & {id: number};


export const useGetpuzzlesTrainTracksId = ({id, ...props}: UseGetpuzzlesTrainTracksIdProps) => useGet<TrainTracks, void, void>(`/puzzles/train-tracks/${id}`, props);


export type GetpuzzlesTrainTracksRandomProps = Omit<GetProps<TrainTracks, unknown, void>, "path">;


export const GetpuzzlesTrainTracksRandom = (props: GetpuzzlesTrainTracksRandomProps) => (
  <Get<TrainTracks, unknown, void>
    path={`/puzzles/train-tracks/random`}
    {...props}
  />
);

export type UseGetpuzzlesTrainTracksRandomProps = Omit<UseGetProps<TrainTracks, void>, "path">;


export const useGetpuzzlesTrainTracksRandom = (props: UseGetpuzzlesTrainTracksRandomProps) => useGet<TrainTracks, unknown, void>(`/puzzles/train-tracks/random`, props);


export type GetpuzzlesCrosswordsIdProps = Omit<GetProps<Crossword, void, void>, "path"> & {id: number};


export const GetpuzzlesCrosswordsId = ({id, ...props}: GetpuzzlesCrosswordsIdProps) => (
  <Get<Crossword, void, void>
    path={`/puzzles/crosswords/${id}`}
    {...props}
  />
);

export type UseGetpuzzlesCrosswordsIdProps = Omit<UseGetProps<Crossword, void>, "path"> & {id: number};


export const useGetpuzzlesCrosswordsId = ({id, ...props}: UseGetpuzzlesCrosswordsIdProps) => useGet<Crossword, void, void>(`/puzzles/crosswords/${id}`, props);

