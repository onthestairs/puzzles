module Server.Puzzles where

import Data.Aeson
import Data.Aeson.Types
import qualified Data.Map.Strict as M
import Data.Text
import Effects.KVStore
import Polysemy
import Polysemy.Error
import Servant

data TrainTracks = TrainTracks Text deriving (Eq, Show, Generic)

instance ToJSON TrainTracks

-- instance ToSchema TrainTracks

-- type PuzzlesAPI
--   = Get '[JSON] [TrainTracks]
--    :<|> :> Capture "id" Int :> Get '[JSON] TrainTracks

type PuzzlesAPI a =
  Get '[JSON] (M.Map Int a)
    :<|> Capture "id" Int :> Get '[JSON] a
    :<|> ReqBody '[JSON] a :> Post '[JSON] a

type TrainTracksAPI = PuzzlesAPI TrainTracks

-- puzzleServer ::
--   (Members '[KVS Int a, Error Text] r) =>
--   ServerT (PuzzlesAPI a) (Sem r)
-- puzzleServer = list :<|> fetch :<|> addAndFetch
--   where
--     addAndFetch x = (add x) >>= fetch

puzzleServer ::
  (Members '[KVS Int TrainTracks, Error Text] r) =>
  ServerT (PuzzlesAPI TrainTracks) (Sem r)
puzzleServer = list :<|> fetch :<|> addAndFetch
  where
    addAndFetch x = (add x) >>= fetch

list :: Member (KVS Int a) r => Sem r (M.Map Int a)
list = fmap M.fromList listAllKvs

fetch ::
  Members '[KVS Int a, Error Text] r =>
  Int ->
  Sem r a
fetch id = getKvs id >>= \case
  Just x -> pure x
  Nothing -> throw "failed to get"

add :: (Member (KVS Int a) r) => a -> Sem r Int
add x = do
  let key = 1
  insertKvs key x
  pure key
